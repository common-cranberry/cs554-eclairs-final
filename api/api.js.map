{"version":3,"file":"api.js","sourceRoot":"./","sources":["api.ts"],"names":[],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst cors = require('cors');\r\nconst passport = require('passport');\r\nconst jwt = require('jsonwebtoken');\r\nconst db = require('./data/data.js');\r\nconst bcrypt = require(\"bcrypt\");\r\nconst saltRounds = 12;\r\nconst bluebird = require(\"bluebird\");\r\nconst redis = require(\"redis\");\r\n\r\nbluebird.promisifyAll(redis.RedisClient.prototype);\r\nbluebird.promisifyAll(redis.Multi.prototype);\r\n\r\n// jwt secret\r\nconst jwtKey = \"AAABAHng0VzwE96spWUNuk4ON4ftocYIoHwr31s4lAx1lV9TzNVl3SoU5gFiJNqd\\n\" +\r\n    \"bsSMzRPn+OT/rv9Wa8rsedGY4aWQAPaa1jKEBjLYGIe+Qwdq/XGTOgieWHh4OyAb\\n\" +\r\n    \"eFBiS1s8uW9lGx4F0vtVRzwHrlF1KXtpVZFZKXHSPQRuUv+WdSrsISdC8l8NEUKH\\n\" +\r\n    \"GPAXW//pnQWKRIIH9M53WUE3fl5/utq8iKg3n2/OpuVf/LFhF3C1zmwTMfl7Cqc8\\n\" +\r\n    \"dxO3BdNJgYQzejWvk1b1+eHBgEj0VXfKetkuCEVUUcVjo+QHxgG/mbFsTuIMboqR\\n\" +\r\n    \"Lu9xwB4pE8zRMb8l7/C2vbSp5A0AAACBAPiNNuce7YDqL/Jp3nE4zot3Eu4tQtF/\\n\" +\r\n    \"VgnOQf6I7mncaW72ZDZvp1R+ArpHig2mTiOfOZhnRQ/iWlCJPXFTQjjMHUYCn4oL\\n\" +\r\n    \"GUdYTJbdWwLewZAjPRalqxG8s2d4J7pOKDedaz9WxORUqwKLP8JM9tE8Hgg1ROAS\\n\" +\r\n    \"9o8paJveatSFAAAAgQCIm1SR56JDY4z56nu3QGmUd5Npub9aJBiieyKUcEQzsLj2\\n\" +\r\n    \"HwOdeajS7fDZaSENYfpqJIgVmpLluWDid7zn4/TuSCiDMUobJHrJ/VO1w90GoIN6\\n\" +\r\n    \"PA3AK3+dLwwB2ynx3IbNmYJy5rY5vT69EEtenn6tzPQjaYKzhYQu1s4THs+zfQAA\\n\" +\r\n    \"AIAYXf6eteYBFRVpUkfFMOaHHw1g0PH9S/55bPxj7EwI4SdrnUHT/YUk6k6j7pbL\\n\" +\r\n    \"I/coDvYOmdDFgBK2NoI4sEQ1J1WYJl30RybVnmBeAvLs44qAW+bRpB+pfyt/Vsrp\\n\" +\r\n    \"4VvPc8bwwhUQIHTq24vef9AToj6m7dhIgVhDNoLNi6w1gQ==\";\r\n\r\n//Run on port 3000\r\nconst port = 3000;\r\nconst app = express();\r\n\r\n//Need to enable cors for requests from front end\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded());\r\n\r\napp.get('/', (req, res) => {\r\n    req;\r\n    res.send(\"The rest server is up and running.\")\r\n});\r\n\r\napp.post('/register', async (req, res) => {\r\n    try {\r\n        let hashpw = await bcrypt.hash(req.body.password,saltRounds);\r\n        let addedUser = await db.addUser(req.body.name,req.body.email,hashpw,req.body.dob);\r\n        let token = jwt.sign({id:addedUser._id,email:addedUser.email},jwtKey);\r\n        res.status(200).json({id:addedUser._id,name:addedUser.name,token});\r\n    } catch (e) {\r\n        res.status(500).json({error:e});\r\n    }\r\n});\r\n\r\napp.post('/login', async (req, res) => {\r\n    try {\r\n        let valid = await db.checkPw(req.body.email,req.body.pw);\r\n        if (valid) {\r\n            let user = await db.getUserByEmail(req.body.email);\r\n            let token = jwt.sign({id:user._id,email:user.email},jwtKey);\r\n            res.status(200).json({id:user._id,name:user.name,token});\r\n        } else {\r\n            res.status(403).json({error:\"Invalid Login\"});\r\n        }\r\n    } catch (e) {\r\n        res.status(500).json({error:e});\r\n    }\r\n});\r\n\r\napp.get('/entries', async (req, res) => {\r\n    let token;\r\n    if (req.headers.authorization) {\r\n        token = req.headers.authorization.split(\" \")[1];\r\n    }\r\n    let payload;\r\n    try {\r\n        payload = jwt.verify(token,jwtKey);\r\n    } catch (e) {\r\n        res.status(403).json({error:\"Invalid Login\"});\r\n        return;\r\n    }\r\n    try {\r\n        let posts = await db.getAllPostsById(payload.id);\r\n        res.status(200).json({posts});\r\n    } catch (e) {\r\n        res.status(500).json({error:e});\r\n    }\r\n});\r\n\r\napp.get('/entries/:date', async (req, res) => {\r\n    let token;\r\n    if (req.headers.authorization) {\r\n        token = req.headers.authorization.split(\" \")[1];\r\n    }\r\n    let payload;\r\n    try {\r\n        payload = jwt.verify(token,jwtKey);\r\n    } catch (e) {\r\n        res.status(403).json({error:\"Invalid Login\"});\r\n        return;\r\n    }\r\n    let date = req.params.date;\r\n    try {\r\n        let post = await db.getSinglePostByUserDate(payload.id,date);\r\n        res.status(200).json(post);\r\n    } catch (e) {\r\n        res.status(500).json({error:e});\r\n    }\r\n});\r\n\r\napp.put('/entries/:date', async (req, res) => {\r\n    let token;\r\n    if (req.headers.authorization) {\r\n        token = req.headers.authorization.split(\" \")[1];\r\n    }\r\n    let payload;\r\n    try {\r\n        payload = jwt.verify(token,jwtKey);\r\n    } catch (e) {\r\n        res.status(403).json({error:\"Invalid Login\"});\r\n        return;\r\n    }\r\n    let date = req.params.date;\r\n    try {\r\n        await db.updatePost(payload.id,date,req.body.content);\r\n        res.status(200).json({msg:\"updated\"});\r\n    } catch (e) {\r\n        res.status(500).json({error:e});\r\n    }\r\n});\r\n\r\napp.post('/entries/:date', async (req, res) => {\r\n    let token;\r\n    if (req.headers.authorization) {\r\n        token = req.headers.authorization.split(\" \")[1];\r\n    }\r\n    let payload;\r\n    try {\r\n        payload = jwt.verify(token,jwtKey);\r\n    } catch (e) {\r\n        res.status(403).json({error:\"Invalid Login\"});\r\n        return;\r\n    }\r\n    let date = req.params.date;\r\n    try {\r\n        await db.addEntry(payload.id,date,req.body.content);\r\n        res.status(200).json({msg:\"posted\"});\r\n    } catch (e) {\r\n        res.status(500).json({error:e});\r\n    }\r\n});\r\n\r\napp.delete('/entries/:date', async (req, res) => {\r\n    let token;\r\n    if (req.headers.authorization) {\r\n        token = req.headers.authorization.split(\" \")[1];\r\n    }\r\n    let payload;\r\n    try {\r\n        payload = jwt.verify(token,jwtKey);\r\n    } catch (e) {\r\n        res.status(403).json({error:\"Invalid Login\"});\r\n        return;\r\n    }\r\n    let date = req.params.date;\r\n    try {\r\n        await db.deletePost(payload.id,date);\r\n        res.status(200).json({msg:\"deleted\"});\r\n    } catch (e) {\r\n        res.status(500).json({error:e});\r\n    }\r\n});\r\n\r\n//Start server\r\napp.listen(port, () => {\r\n    console.log('Rest service started');\r\n});"]}
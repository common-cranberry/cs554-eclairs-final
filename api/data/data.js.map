{"version":3,"file":"data.js","sourceRoot":"./","sources":["data/data.ts"],"names":[],"mappings":"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","sourcesContent":["import getColls from \"./db_cfg\";\r\n\r\nconst uuidv1 = require('uuid/v1');\r\nconst bcrypt = require(\"bcrypt\");\r\n// @ts-ignore\r\nconst saltRounds = 12;\r\n\r\nlet users; // did this way to avoid possible undeclared TS err\r\nlet posts;\r\nusers = getColls().users;\r\nposts = getColls().posts;\r\n\r\n// helpers\r\nfunction checkNumArgs(needArgs, givenArgs) {\r\n    if(needArgs !== givenArgs) { throw 'DB: Incorrect number of args given - given: ' + givenArgs + ', needed: ' + needArgs; }\r\n}\r\n\r\n// USER data\r\nasync function addUser(name:string, email:string, pw:string, dob:Date) {\r\n    // @ts-ignore\r\n    checkNumArgs(4,arguments.length);\r\n    if (!name) throw \"DB addUser needs name\";\r\n    if (!email) throw \"DB addUser needs email\";\r\n    if (!name) throw \"DB addUser needs name\";\r\n\r\n    if (await getUserByEmail(email) != null) throw \"DB Error User already exists for email\";\r\n\r\n    let newUser = {\r\n        _id: uuidv1(),\r\n        name: name,\r\n        email: email,\r\n        password: pw,\r\n        dob: dob\r\n    };\r\n\r\n    let coll = await users();\r\n    let insert = await coll.insertOne(newUser);\r\n    if (insert.insertedCount === 0) throw \"DB Error adding user\";\r\n    // return user info by checking for it in the DB\r\n    return await getUserById(newUser._id);\r\n}\r\n\r\nasync function getUserById(id:string) {\r\n    // @ts-ignore\r\n    checkNumArgs(1,arguments.length);\r\n    if (!id) throw \"DB getUser needs ID\";\r\n\r\n    let coll = await users();\r\n    let user = await coll.findOne({_id:id});\r\n    if (user===null) throw \"DB Error User not found\";\r\n    return user;\r\n}\r\n\r\nasync function getUserByEmail(email:string) {\r\n    // @ts-ignore\r\n    checkNumArgs(1,arguments.length);\r\n    if (!email) throw \"DB getUser needs Email\";\r\n\r\n    let coll = await users();\r\n    return await coll.findOne({email:email});\r\n}\r\n\r\nasync function checkPw(email:string,pw:string) {\r\n    // @ts-ignore\r\n    checkNumArgs(2,arguments.length);\r\n    if (!email) throw \"DB validate needs Email\";\r\n    if (!pw) throw \"DB validate needs PW\";\r\n\r\n    let user = await getUserByEmail(email);\r\n    if (user===null) throw \"DB Error User not found\";\r\n\r\n    return await bcrypt.compare(pw,user.password);\r\n}\r\n\r\n\r\n// POSTS data\r\n\r\nasync function getAllPostsById(id:string) {\r\n    // @ts-ignore\r\n    checkNumArgs(1,arguments.length);\r\n    if (!id) throw \"DB getPosts needs ID\";\r\n\r\n    let coll = await posts();\r\n    let postList = await coll.find({user:id}).toArray();\r\n    if (postList===null) throw \"DB Error No posts found for user\";\r\n    return postList;\r\n}\r\n\r\nasync function getSinglePostByUserDate(id:string,date:Date) {\r\n    // @ts-ignore\r\n    checkNumArgs(2,arguments.length);\r\n    if (!id) throw \"DB getPost needs ID\";\r\n    if (!id) throw \"DB getPost needs Date\";\r\n\r\n    let coll = await posts();\r\n    return await coll.findOne({user:id,date:date});\r\n}\r\n\r\nasync function getPostById(id:string) {\r\n    // @ts-ignore\r\n    checkNumArgs(1,arguments.length);\r\n    if (!id) throw \"DB getPost needs ID\";\r\n\r\n    let coll = await posts();\r\n    return await coll.findOne({_id:id});\r\n}\r\n\r\nasync function updatePost(uid:string,date:Date,content:string) {\r\n    // @ts-ignore\r\n    checkNumArgs(3,arguments.length);\r\n    if (!uid) throw \"DB getPost needs ID\";\r\n    if (!uid) throw \"DB getPost needs Date\";\r\n    if (!uid) throw \"DB getPost needs new content\";\r\n\r\n    let coll = await posts();\r\n    let post = await coll.updateOne({user:uid,date:date},{$set: {content:content}});\r\n    if (post===null) throw \"DB Error Post not found\";\r\n    return post;\r\n}\r\n\r\nasync function addEntry(uid:string,date:Date,content:string) {\r\n    // @ts-ignore\r\n    checkNumArgs(3,arguments.length);\r\n    if (!uid) throw \"DB addUser needs name\";\r\n    if (!date) throw \"DB addUser needs email\";\r\n    if (!content) throw \"DB addUser needs name\";\r\n\r\n    let existing = await getSinglePostByUserDate(uid,date);\r\n    if (existing != null) throw \"DB Error Post already exists for that User/Date\";\r\n\r\n    let newPost = {\r\n        _id: uuidv1(),\r\n        user: uid,\r\n        date: date,\r\n        content: content\r\n    };\r\n\r\n    let coll = await posts();\r\n    let insert = await coll.insertOne(newPost);\r\n    if (insert.insertedCount === 0) throw \"DB Error adding user\";\r\n    // return user info by checking for it in the DB\r\n    return await getPostById(newPost._id);\r\n}\r\n\r\nasync function deletePost(uid:string,date:Date) {\r\n    // @ts-ignore\r\n    checkNumArgs(2,arguments.length);\r\n    if (!uid) throw \"DB delPost needs userid\";\r\n    if (!date) throw \"DB delPost needs date\";\r\n\r\n    let coll = await posts();\r\n    let del = await coll.remove({user:uid,date:date});\r\n    if (del.deletedCount === 0) throw \"DB Error deleting post\";\r\n\r\n    return;\r\n}\r\n\r\nmodule.exports = {\r\n    addUser,\r\n    getUserById,\r\n    getUserByEmail,\r\n    checkPw,\r\n    getSinglePostByUserDate,\r\n    getPostById,\r\n    getAllPostsById,\r\n    updatePost,\r\n    addEntry,\r\n    deletePost\r\n};"]}